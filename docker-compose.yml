version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - clinic_network

  # Redis for caching and locks
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - clinic_network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - clinic_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - clinic_network

  # Patient & Staff API (FastAPI)
  patient_api:
    build:
      context: .
      dockerfile: ./patient_api/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${PATIENT_API_SECRET_KEY}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - clinic_network

  # Scheduling Service (Django)
  scheduling_service:
    build:
      context: ./scheduling_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      GOOGLE_CALENDAR_API_KEY: ${GOOGLE_CALENDAR_API_KEY}
      SECRET_KEY: ${SCHEDULING_SERVICE_SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      DEBUG: "False"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - clinic_network

  # AI Memory Service (FastAPI)
  ai_memory_service:
    build:
      context: .
      dockerfile: ./ai_memory_service/Dockerfile
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - clinic_network

  # Billing Service (FastAPI)
  billing_service:
    build:
      context: .
      dockerfile: ./billing_service/Dockerfile
    ports:
      - "8003:8003"
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - postgres
      - kafka
    networks:
      - clinic_network

  # Airflow for ETL
  airflow-webserver:
    image: apache/airflow:2.7.1
    command: webserver
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
    depends_on:
      - postgres
    networks:
      - clinic_network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - clinic_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - clinic_network

volumes:
  postgres_data:
  grafana_data:

networks:
  clinic_network:
    driver: bridge 